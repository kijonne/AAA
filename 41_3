Понял, нужно создать отдельные проекты для каждого задания. Вот реализация каждого задания в виде отдельных проектов с объяснением кода.

## Задание 5.1 - Анимация меню (отдельный проект)

**MainWindow.xaml**
```xml
<Window x:Class="MenuAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация меню" Height="450" Width="800">
    
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        
        <!-- Боковое меню с анимацией -->
        <Border x:Name="SideMenu" Grid.Column="0" Width="200" Background="#FF2196F3">
            <StackPanel>
                <TextBlock Text="Меню" Foreground="White" FontSize="18" 
                           Margin="10" FontWeight="Bold"/>
                <Button Content="Пункт 1" Margin="10" Background="#FF1976D2" Foreground="White"/>
                <Button Content="Пункт 2" Margin="10" Background="#FF1976D2" Foreground="White"/>
                <Button Content="Пункт 3" Margin="10" Background="#FF1976D2" Foreground="White"/>
            </StackPanel>
        </Border>
        
        <!-- Кнопка-гамбургер -->
        <Button Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Top"
                Width="30" Height="30" Margin="5" Click="ToggleMenu_Click">
            <Path Data="M0,4 L30,4 M0,15 L30,15 M0,26 L30,26" 
                  Stroke="White" StrokeThickness="3"/>
        </Button>
        
        <!-- Основное содержимое -->
        <Border Grid.Column="1" Background="#FFF5F5F5">
            <TextBlock Text="Основное содержимое" VerticalAlignment="Center" 
                       HorizontalAlignment="Center" FontSize="24"/>
        </Border>
    </Grid>
</Window>
```

**MainWindow.xaml.cs**
```csharp
using System.Windows;
using System.Windows.Media.Animation;

namespace MenuAnimation
{
    public partial class MainWindow : Window
    {
        private bool isMenuOpen = true;
        
        public MainWindow()
        {
            InitializeComponent();
        }
        
        private void ToggleMenu_Click(object sender, RoutedEventArgs e)
        {
            // Создаем анимацию для ширины меню
            DoubleAnimation animation = new DoubleAnimation
            {
                Duration = TimeSpan.FromSeconds(1),
                EasingFunction = new CubicEase { EasingMode = EasingMode.EaseInOut }
            };
            
            if (isMenuOpen)
            {
                // Анимация закрытия (уменьшение ширины до 0)
                animation.To = 0;
            }
            else
            {
                // Анимация открытия (увеличение ширины до 200)
                animation.To = 200;
            }
            
            // Запускаем анимацию
            SideMenu.BeginAnimation(Border.WidthProperty, animation);
            
            isMenuOpen = !isMenuOpen;
        }
    }
}
```

**Объяснение:**
1. Создается интерфейс с боковым меню и кнопкой-гамбургером
2. При нажатии на кнопку запускается анимация изменения ширины меню
3. Используется `DoubleAnimation` для плавного изменения ширины за 1 секунду
4. `EasingFunction` делает анимацию более естественной (замедление в начале и конце)

## Задание 5.2 - Анимация текста кнопки (отдельный проект)

**MainWindow.xaml**
```xml
<Window x:Class="TextAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация текста" Height="450" Width="800">
    
    <Grid>
        <Button x:Name="AnimatedButton" Content="Нажми меня" 
                HorizontalAlignment="Center" VerticalAlignment="Center"
                FontSize="16" Padding="20,10" Background="#FF3F51B5" Foreground="White"/>
    </Grid>
</Window>
```

**MainWindow.xaml.cs**
```csharp
using System.Windows;
using System.Windows.Media.Animation;

namespace TextAnimation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            Loaded += MainWindow_Loaded;
        }
        
        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            // Создаем анимацию для увеличения размера текста
            DoubleAnimation growAnimation = new DoubleAnimation
            {
                To = 32, // Увеличиваем в 2 раза (исходный 16)
                Duration = TimeSpan.FromSeconds(0.5),
                AutoReverse = true, // Автоматическое возвращение к исходному размеру
                RepeatBehavior = new RepeatBehavior(2) // Повторяем 2 раза
            };
            
            // Применяем анимацию к свойству FontSize
            AnimatedButton.BeginAnimation(Button.FontSizeProperty, growAnimation);
        }
    }
}
```

**Объяснение:**
1. При загрузке окна автоматически запускается анимация
2. `DoubleAnimation` изменяет размер шрифта с 16 до 32 (вдвое)
3. `AutoReverse = true` - текст возвращается к исходному размеру
4. `RepeatBehavior = 2` - анимация выполняется 2 раза (увеличение + уменьшение считается за 1 цикл)

## Задание 5.3 - Комплексная анимация (отдельный проект)

**MainWindow.xaml**
```xml
<Window x:Class="ComplexAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Комплексная анимация" Height="450" Width="800">
    
    <Grid>
        <Button x:Name="AnimatedButton" Content="Анимированная кнопка" 
                HorizontalAlignment="Center" VerticalAlignment="Center"
                Width="150" Height="50" FontSize="16" 
                Background="#FF3F51B5" Foreground="White"/>
    </Grid>
</Window>
```

**MainWindow.xaml.cs**
```csharp
using System.Windows;
using System.Windows.Media.Animation;

namespace ComplexAnimation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            Loaded += MainWindow_Loaded;
        }
        
        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            // Создаем Storyboard для комплексной анимации
            Storyboard storyboard = new Storyboard();
            
            // Анимация для ширины кнопки
            DoubleAnimation widthAnimation = new DoubleAnimation
            {
                To = 300, // Увеличиваем в 2 раза (исходная 150)
                Duration = TimeSpan.FromSeconds(0.5),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            Storyboard.SetTarget(widthAnimation, AnimatedButton);
            Storyboard.SetTargetProperty(widthAnimation, new PropertyPath(Button.WidthProperty));
            
            // Анимация для высоты кнопки
            DoubleAnimation heightAnimation = new DoubleAnimation
            {
                To = 100, // Увеличиваем в 2 раза (исходная 50)
                Duration = TimeSpan.FromSeconds(0.5),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            Storyboard.SetTarget(heightAnimation, AnimatedButton);
            Storyboard.SetTargetProperty(heightAnimation, new PropertyPath(Button.HeightProperty));
            
            // Анимация для текста кнопки
            DoubleAnimation fontSizeAnimation = new DoubleAnimation
            {
                To = 32, // Увеличиваем в 2 раза (исходный 16)
                Duration = TimeSpan.FromSeconds(0.5),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            Storyboard.SetTarget(fontSizeAnimation, AnimatedButton);
            Storyboard.SetTargetProperty(fontSizeAnimation, new PropertyPath(Button.FontSizeProperty));
            
            // Добавляем все анимации в Storyboard
            storyboard.Children.Add(widthAnimation);
            storyboard.Children.Add(heightAnimation);
            storyboard.Children.Add(fontSizeAnimation);
            
            // Запускаем комплексную анимацию
            storyboard.Begin();
        }
    }
}
```

**Объяснение:**
1. Используется `Storyboard` для объединения нескольких анимаций
2. Одновременно анимируются:
   - Ширина кнопки (150 → 300)
   - Высота кнопки (50 → 100)
   - Размер шрифта (16 → 32)
3. Все анимации имеют одинаковые параметры (длительность, повторение, авто-возврат)
4. Анимации запускаются синхронно при загрузке окна

## Задание 5.4 - Анимация при наведении (отдельный проект)

**MainWindow.xaml**
```xml
<Window x:Class="HoverAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация при наведении" Height="450" Width="800">
    
    <Window.Resources>
        <!-- Стиль для анимируемых элементов -->
        <Style TargetType="Border" x:Key="AnimatedElementStyle">
            <Setter Property="Background" Value="#FFE1E1E1"/>
            <Setter Property="Margin" Value="20"/>
            <Setter Property="CornerRadius" Value="5"/>
            <Setter Property="Padding" Value="20"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Storyboard.TargetProperty="Background.Color"
                                                To="#FF4CAF50" Duration="0:0:0.3"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Storyboard.TargetProperty="Background.Color"
                                                Duration="0:0:0.3"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    
    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
        <Border Style="{StaticResource AnimatedElementStyle}">
            <TextBlock Text="Элемент 1" FontSize="18"/>
        </Border>
        <Border Style="{StaticResource AnimatedElementStyle}">
            <TextBlock Text="Элемент 2" FontSize="18"/>
        </Border>
        <Border Style="{StaticResource AnimatedElementStyle}">
            <TextBlock Text="Элемент 3" FontSize="18"/>
        </Border>
    </StackPanel>
</Window>
```

**Объяснение:**
1. Создается стиль с триггерами для анимации при наведении
2. При наведении курсора (`IsMouseOver = True`) запускается анимация изменения цвета фона на зеленый
3. При уходе курсора цвет возвращается к исходному
4. `ColorAnimation` длится 0.3 секунды
5. Стиль применяется к трем элементам Border

## Задание 5.5 - Анимация градиента (отдельный проект)

**MainWindow.xaml**
```xml
<Window x:Class="GradientAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация градиента" Height="450" Width="800">
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Круг с градиентной заливкой -->
        <Ellipse x:Name="ColorCircle" Width="200" Height="200" 
                 HorizontalAlignment="Center" VerticalAlignment="Center">
            <Ellipse.Fill>
                <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                    <GradientStop Color="Red" Offset="0"/>
                    <GradientStop Color="Blue" Offset="1"/>
                </RadialGradientBrush>
            </Ellipse.Fill>
        </Ellipse>
        
        <!-- Кнопка для запуска анимации -->
        <Button Grid.Row="1" Content="Изменить цвет" 
                HorizontalAlignment="Center" Margin="10" Padding="20,5"
                Click="ChangeColor_Click" Background="#FF3F51B5" Foreground="White"/>
    </Grid>
</Window>
```

**MainWindow.xaml.cs**
```csharp
using System.Windows;
using System.Windows.Media.Animation;
using System.Windows.Media;

namespace GradientAnimation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
        
        private void ChangeColor_Click(object sender, RoutedEventArgs e)
        {
            // Получаем текущую кисть круга
            var brush = (RadialGradientBrush)ColorCircle.Fill;
            
            // Создаем анимацию по ключевым кадрам
            ColorAnimationUsingKeyFrames animation = new ColorAnimationUsingKeyFrames
            {
                Duration = TimeSpan.FromSeconds(5),
                RepeatBehavior = RepeatBehavior.Forever
            };
            
            // Добавляем ключевые кадры (5 цветов)
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(0.0)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Yellow, KeyTime.FromPercent(0.25)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Green, KeyTime.FromPercent(0.5)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(0.75)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Purple, KeyTime.FromPercent(1.0)));
            
            // Применяем анимацию к первому GradientStop
            brush.GradientStops[0].BeginAnimation(GradientStop.ColorProperty, animation);
            
            // Создаем вторую анимацию для другого GradientStop
            ColorAnimationUsingKeyFrames animation2 = new ColorAnimationUsingKeyFrames
            {
                Duration = TimeSpan.FromSeconds(5),
                RepeatBehavior = RepeatBehavior.Forever
            };
            
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(0.0)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Purple, KeyTime.FromPercent(0.25)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(0.5)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Yellow, KeyTime.FromPercent(0.75)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Green, KeyTime.FromPercent(1.0)));
            
            // Применяем анимацию ко второму GradientStop
            brush.GradientStops[1].BeginAnimation(GradientStop.ColorProperty, animation2);
        }
    }
}
```

**Объяснение:**
1. Создается круг с градиентной заливкой (от красного к синему)
2. При нажатии на кнопку запускается анимация изменения цветов градиента
3. Используется `ColorAnimationUsingKeyFrames` с 5 ключевыми кадрами
4. Каждый `GradientStop` анимируется отдельно с разными наборами цветов
5. Анимация длится 5 секунд и повторяется бесконечно
6. Цвета плавно перетекают между ключевыми кадрами

Каждый из этих проектов можно создать отдельно в Visual Studio, добавив соответствующие файлы XAML и C# кода. Все проекты соответствуют требованиям заданий и демонстрируют различные виды анимации в WPF.
