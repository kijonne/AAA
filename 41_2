# Решение лабораторной работы №41 по WPF анимации

Я выполню каждое задание в отдельном проекте WPF на C#. Вот подробные решения для каждого задания:

## Задание 5.1: Анимация появления меню

**Проект:** HamburgerMenuAnimation

**Инструменты на форме:**
- Grid (основной контейнер)
- Button (кнопка-гамбургер)
- Border (боковое меню)
- StackPanel внутри Border (для содержимого меню)

**Решение:**
```xml
<Window x:Class="HamburgerMenuAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация меню" Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        
        <!-- Боковое меню -->
        <Border x:Name="MenuBorder" Grid.Column="0" Width="200" Background="#FF333333">
            <StackPanel>
                <Button Content="Пункт 1" Margin="10" Foreground="White" Background="Transparent"/>
                <Button Content="Пункт 2" Margin="10" Foreground="White" Background="Transparent"/>
                <Button Content="Пункт 3" Margin="10" Foreground="White" Background="Transparent"/>
            </StackPanel>
        </Border>
        
        <!-- Кнопка-гамбургер -->
        <Button x:Name="HamburgerButton" Grid.Column="1" Width="40" Height="40" 
                HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10"
                Click="HamburgerButton_Click">
            <Path Data="M0,4 L24,4 M0,12 L24,12 M0,20 L24,20" 
                  Stroke="Black" StrokeThickness="2"/>
        </Button>
    </Grid>
</Window>
```

```csharp
using System.Windows;
using System.Windows.Media.Animation;

namespace HamburgerMenuAnimation
{
    public partial class MainWindow : Window
    {
        private bool isMenuOpen = true;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void HamburgerButton_Click(object sender, RoutedEventArgs e)
        {
            DoubleAnimation animation = new DoubleAnimation
            {
                Duration = TimeSpan.FromSeconds(1),
                To = isMenuOpen ? 0 : 200
            };

            MenuBorder.BeginAnimation(WidthProperty, animation);
            isMenuOpen = !isMenuOpen;
        }
    }
}
```

**Объяснение:**
1. Создаем Grid с двумя колонками - для меню и основного содержимого
2. Border представляет боковое меню с начальной шириной 200px
3. Кнопка с тремя линиями (гамбургер) инициирует анимацию
4. При клике создается DoubleAnimation, которая за 1 секунду изменяет ширину меню
5. Анимация переключается между 0 и 200px при каждом клике

## Задание 5.2: Анимация размера текста кнопки

**Проект:** ButtonTextAnimation

**Инструменты на форме:**
- Button с текстом по центру окна

**Решение:**
```xml
<Window x:Class="ButtonTextAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация текста" Height="450" Width="800">
    <Grid>
        <Button x:Name="AnimatedButton" Content="Нажми меня" 
                HorizontalAlignment="Center" VerticalAlignment="Center"
                FontSize="16" Loaded="AnimatedButton_Loaded"/>
    </Grid>
</Window>
```

```csharp
using System.Windows;
using System.Windows.Media.Animation;

namespace ButtonTextAnimation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void AnimatedButton_Loaded(object sender, RoutedEventArgs e)
        {
            DoubleAnimation animation = new DoubleAnimation
            {
                From = 16,
                To = 32,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };

            AnimatedButton.BeginAnimation(FontSizeProperty, animation);
        }
    }
}
```

**Объяснение:**
1. Кнопка размещена по центру окна с начальным размером шрифта 16
2. При загрузке кнопки запускается анимация DoubleAnimation
3. Анимация увеличивает размер шрифта до 32px за 1 секунду
4. AutoReverse = true делает обратную анимацию
5. RepeatBehavior = 2 означает, что анимация выполнится 2 раза (увеличение + уменьшение = 1 цикл)

## Задание 5.3: Комплексная анимация кнопки

**Проект:** ComplexButtonAnimation

**Инструменты на форме:**
- Button с текстом по центру окна

**Решение:**
```xml
<Window x:Class="ComplexButtonAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Комплексная анимация" Height="450" Width="800">
    <Grid>
        <Button x:Name="AnimatedButton" Content="Нажми меня" 
                HorizontalAlignment="Center" VerticalAlignment="Center"
                FontSize="16" Width="100" Height="50"
                Loaded="AnimatedButton_Loaded"/>
    </Grid>
</Window>
```

```csharp
using System.Windows;
using System.Windows.Media.Animation;

namespace ComplexButtonAnimation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void AnimatedButton_Loaded(object sender, RoutedEventArgs e)
        {
            // Анимация размера шрифта
            DoubleAnimation fontSizeAnimation = new DoubleAnimation
            {
                From = 16,
                To = 32,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };

            // Анимация ширины кнопки
            DoubleAnimation widthAnimation = new DoubleAnimation
            {
                From = 100,
                To = 200,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };

            // Анимация высоты кнопки
            DoubleAnimation heightAnimation = new DoubleAnimation
            {
                From = 50,
                To = 100,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };

            AnimatedButton.BeginAnimation(FontSizeProperty, fontSizeAnimation);
            AnimatedButton.BeginAnimation(WidthProperty, widthAnimation);
            AnimatedButton.BeginAnimation(HeightProperty, heightAnimation);
        }
    }
}
```

**Объяснение:**
1. Добавлены три анимации: для размера шрифта, ширины и высоты кнопки
2. Все анимации работают одновременно с одинаковыми параметрами
3. Каждая анимация увеличивает свой параметр вдвое за 1 секунду
4. AutoReverse и RepeatBehavior обеспечивают 2 цикла анимации

## Задание 5.4: Анимация цвета при наведении

**Проект:** HoverColorAnimation

**Инструменты на форме:**
- Три элемента управления (например, Button, Rectangle, Border)

**Решение:**
```xml
<Window x:Class="HoverColorAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация цвета" Height="450" Width="800">
    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Spacing="20">
        <Button Content="Кнопка" Width="200" Height="50" Style="{StaticResource HoverStyle}"/>
        <Border Width="200" Height="50" CornerRadius="10" Style="{StaticResource HoverStyle}">
            <TextBlock Text="Граница" VerticalAlignment="Center" HorizontalAlignment="Center"/>
        </Border>
        <Rectangle Width="200" Height="50" Style="{StaticResource HoverStyle}"/>
    </StackPanel>
    
    <Window.Resources>
        <Style x:Key="HoverStyle" TargetType="FrameworkElement">
            <Setter Property="Background" Value="LightBlue"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation To="LightCoral" Duration="0:0:0.3"
                                                Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation To="LightBlue" Duration="0:0:0.3"
                                                Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
</Window>
```

**Объяснение:**
1. Создан стиль HoverStyle с триггером на IsMouseOver
2. При наведении курсора ColorAnimation меняет цвет фона на LightCoral за 0.3 секунды
3. При уходе курсора цвет возвращается к LightBlue
4. Стиль применен к трем разным элементам управления

## Задание 5.5: Анимация градиента по ключевым кадрам

**Проект:** KeyFrameAnimation

**Инструменты на форме:**
- Кнопка для запуска анимации
- Эллипс (круг) с градиентной заливкой

**Решение:**
```xml
<Window x:Class="KeyFrameAnimation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Анимация по ключевым кадрам" Height="450" Width="800">
    <Grid>
        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Spacing="20">
            <Button Content="Запустить анимацию" Width="200" Height="50" Click="Button_Click"/>
            <Ellipse x:Name="ColorCircle" Width="200" Height="200" Stroke="Black" StrokeThickness="2">
                <Ellipse.Fill>
                    <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                        <GradientStop Color="Red" Offset="0"/>
                        <GradientStop Color="Blue" Offset="1"/>
                    </RadialGradientBrush>
                </Ellipse.Fill>
            </Ellipse>
        </StackPanel>
    </Grid>
</Window>
```

```csharp
using System.Windows;
using System.Windows.Media.Animation;
using System.Windows.Media;

namespace KeyFrameAnimation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            var gradient = (RadialGradientBrush)ColorCircle.Fill;
            
            var animation1 = new ColorAnimationUsingKeyFrames();
            animation1.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(0)));
            animation1.KeyFrames.Add(new LinearColorKeyFrame(Colors.Yellow, KeyTime.FromPercent(0.2)));
            animation1.KeyFrames.Add(new LinearColorKeyFrame(Colors.Green, KeyTime.FromPercent(0.4)));
            animation1.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(0.6)));
            animation1.KeyFrames.Add(new LinearColorKeyFrame(Colors.Purple, KeyTime.FromPercent(0.8)));
            animation1.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(1)));
            animation1.Duration = TimeSpan.FromSeconds(3);
            
            var animation2 = new ColorAnimationUsingKeyFrames();
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(0)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Purple, KeyTime.FromPercent(0.2)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(0.4)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Yellow, KeyTime.FromPercent(0.6)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Green, KeyTime.FromPercent(0.8)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(1)));
            animation2.Duration = TimeSpan.FromSeconds(3);
            
            gradient.GradientStops[0].BeginAnimation(GradientStop.ColorProperty, animation1);
            gradient.GradientStops[1].BeginAnimation(GradientStop.ColorProperty, animation2);
        }
    }
}
```

**Объяснение:**
1. Создан эллипс с градиентной заливкой от Red до Blue
2. При нажатии кнопки создаются две анимации ColorAnimationUsingKeyFrames
3. Каждая анимация содержит 5 ключевых кадров с разными цветами
4. Анимации применяются к двум точкам градиента, создавая плавный переход между цветами
5. Длительность анимации - 3 секунды

Каждый проект представляет отдельное задание из лабораторной работы, с использованием различных видов анимации в WPF. Все проекты соответствуют требованиям задания и демонстрируют различные техники работы с анимацией.
