–°–æ–∑–¥–∞–º —Å—Ç—Ä–æ–≥–æ –ø–æ –¢–ó –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:

üìÑ Program.cs

```csharp
using BenchmarkDotNet.Running;
using LabWork11;

BenchmarkRunner.Run<PrimesBenchmark>();
```

üìÑ PrimesBenchmark.cs

```csharp
using BenchmarkDotNet.Attributes;

namespace LabWork11;

[MemoryDiagnoser]
public class PrimesBenchmark
{
    [Params(10_000, 50_000, 100_000)]
    public int N;

    [Benchmark(Baseline = true)]
    public int SumPrimesNaive()
    {
        int sum = 0;
        for (int i = 2; i <= N; i++)
            if (IsPrimeNaive(i)) sum += i;
        return sum;
    }

    [Benchmark]
    public int SumPrimesFast()
    {
        int sum = 0;
        for (int i = 2; i <= N; i++)
            if (IsPrimeFast(i)) sum += i;
        return sum;
    }

    private static bool IsPrimeNaive(int n)
    {
        for (int i = 2; i < n; i++)
            if (n % i == 0) return false;
        return true;
    }

    private static bool IsPrimeFast(int n)
    {
        if (n < 2) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        int sqrt = (int)Math.Sqrt(n);
        for (int i = 3; i <= sqrt; i += 2)
            if (n % i == 0) return false;
        return true;
    }
}
```

üìÑ LabWork11.csproj

```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BenchmarkDotNet" Version="0.13.12" />
  </ItemGroup>

</Project>
```

–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 5.2 (–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ) - —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–µ–∫—Ç –≤ —Ç–æ–º –∂–µ —Ä–µ—à–µ–Ω–∏–∏:

üìÑ ProfilingProject/Program.cs

```csharp
using System.Diagnostics;

class Program
{
    static void Main()
    {
        const string filePath = "server.log";
        if (!File.Exists(filePath))
            File.WriteAllLines(filePath, GenerateFakeLogs(50_000));
        
        var sw = Stopwatch.StartNew();
        var result = AnalyzeLogs(filePath);
        sw.Stop();
        
        Console.WriteLine($"–û—à–∏–±–æ–∫: {result.errorCount}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result.warningCount}");
        Console.WriteLine($"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {sw.ElapsedMilliseconds} –º—Å");
    }

    static (int errorCount, int warningCount) AnalyzeLogs(string path)
    {
        var lines = File.ReadAllLines(path);
        int errorCount = lines.Count(l => l.Contains("ERROR"));
        int warningCount = lines.Count(l => l.Contains("WARNING"));
        return (errorCount, warningCount);
    }

    static IEnumerable<string> GenerateFakeLogs(int count)
    {
        var rand = new Random();
        string[] types = { "INFO", "WARNING", "ERROR" };
        for (int i = 0; i < count; i++)
        {
            yield return $"{DateTime.Now:HH:mm:ss} [{types[rand.Next(types.Length)]}] Message {i}";
        }
    }
}
```

üìÑ ProfilingProject/ProfilingProject.csproj

```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>
```

–°—Ç—Ä–æ–≥–æ –ø–æ –¢–ó:

¬∑ –ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è BenchmarkDotNet (–∑–∞–¥–∞–Ω–∏–µ 5.1)
¬∑ –í—Ç–æ—Ä–æ–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–¥–∞–Ω–∏–µ 5.2)
¬∑ –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –º–µ–Ω—é –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
